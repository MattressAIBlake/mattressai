generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")  # Temporarily commented for local migration
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model CustomerToken {
  id             String   @id
  conversationId String
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([conversationId])
}

model CodeVerifier {
  id        String   @id
  state     String   @unique
  verifier  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([state])
}

model Conversation {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model CustomerAccountUrl {
  id             String   @id @default(cuid())
  conversationId String   @unique
  url            String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PromptVersion {
  id             String   @id @default(cuid())
  tenant         String
  compiledPrompt String
  runtimeRules   String
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tenant])
  @@index([isActive])
}

model IndexJob {
  id                  String    @id @default(cuid())
  tenant              String
  status              String
  startedAt           DateTime  @default(now())
  finishedAt          DateTime?
  totalProducts       Int       @default(0)
  processedProducts   Int       @default(0)
  failedProducts      Int       @default(0)
  tokensUsed          Int       @default(0)
  costEstimate        Float     @default(0.0)
  actualCost          Float?
  operationId         String?
  errorMessage        String?
  useAIEnrichment     Boolean   @default(true)
  confidenceThreshold Float     @default(0.7)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([tenant])
  @@index([status])
  @@index([startedAt])
}

model ProductProfile {
  id                    String   @id @default(cuid())
  tenant                String
  shopifyProductId      String
  title                 String
  imageUrl              String?
  body                  String?
  vendor                String?
  productType           String?
  tags                  String?
  firmness              String?
  height                String?
  material              String?
  certifications        String?
  features              String?
  supportFeatures       String?
  enrichedAt            DateTime @default(now())
  enrichmentMethod      String
  confidence            Float
  sourceEvidence        String?
  modelVersion          String?
  contentHash           String   @unique
  lockedFirmness        Boolean  @default(false)
  lockedHeight          Boolean  @default(false)
  lockedMaterial        Boolean  @default(false)
  lockedCertifications  Boolean  @default(false)
  lockedFeatures        Boolean  @default(false)
  lockedSupportFeatures Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([tenant])
  @@index([shopifyProductId])
  @@index([contentHash])
}

model ChatSession {
  id             String    @id @default(cuid())
  tenantId       String
  conversationId String?
  startedAt      DateTime  @default(now())
  endedAt        DateTime?
  endReason      String?
  intentScore    Int?
  promptVersion  String?
  variantId      String?
  summary        String?
  consent        Boolean?
  lastActivityAt DateTime  @default(now())
  alerts         Alert[]
  events         Event[]
  leads          Lead[]

  @@index([tenantId])
  @@index([conversationId])
  @@index([endedAt])
  @@index([lastActivityAt])
  @@index([variantId])
}

model Lead {
  id                String      @id @default(cuid())
  tenantId          String
  sessionId         String
  email             String?
  phone             String?
  name              String?
  zip               String?
  consent           Boolean     @default(false)
  shopifyCustomerId String?
  variantId         String?
  status            String      @default("new")
  tags              String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  session           ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
  @@index([variantId])
}

model Alert {
  id        String       @id @default(cuid())
  tenantId  String
  sessionId String?
  type      String
  channel   String
  payload   String
  status    String       @default("queued")
  attempts  Int          @default(0)
  error     String?
  createdAt DateTime     @default(now())
  sentAt    DateTime?
  session   ChatSession? @relation(fields: [sessionId], references: [id])

  @@index([tenantId])
  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
}

model Event {
  id        String       @id @default(cuid())
  tenantId  String
  sessionId String?
  type      String
  timestamp DateTime     @default(now())
  metadata  String
  clickId   String?
  variantId String?
  session   ChatSession? @relation(fields: [sessionId], references: [id])

  @@index([tenantId])
  @@index([sessionId])
  @@index([type])
  @@index([timestamp])
  @@index([clickId])
  @@index([variantId])
}

model AlertSettings {
  id         String   @id @default(cuid())
  tenantId   String   @unique
  triggers   String
  channels   String
  quietHours String?
  throttles  String
  digest     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([tenantId])
}

model Experiment {
  id        String    @id @default(cuid())
  tenantId  String
  name      String
  status    String
  startAt   DateTime  @default(now())
  endAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  variants  Variant[]

  @@index([tenantId])
  @@index([status])
  @@index([startAt])
}

model Variant {
  id                String     @id @default(cuid())
  experimentId      String
  name              String
  splitPercent      Int
  promptVersionId   String?
  rulesOverrideJson String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  experiment        Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
}

model Tenant {
  id                   String    @id
  shop                 String    @unique
  planName             String    @default("starter")
  billingId            String?
  billingStatus        String?
  trialEndsAt          DateTime?
  quotas               String?
  fallbackMessageType  String?
  fallbackContactInfo  String?
  firstIndexCompleted  Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([shop])
  @@index([planName])
  @@index([billingStatus])
}

model Plan {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Float
  features  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

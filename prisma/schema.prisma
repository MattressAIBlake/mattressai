// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model CustomerToken {
  id              String    @id
  conversationId  String
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([conversationId])
}

model CodeVerifier {
  id              String    @id
  state           String    @unique
  verifier        String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime

  @@index([state])
}

model Conversation {
  id        String    @id
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // "user" or "assistant"
  content        String
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model CustomerAccountUrl {
  id             String    @id @default(cuid())
  conversationId String    @unique
  url            String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model PromptVersion {
  id             String   @id @default(cuid())
  tenant         String   // shop domain (e.g., 'mystore.myshopify.com')
  compiledPrompt String   // human-readable prompt summary
  runtimeRules   String   // JSON string of validated runtime rules
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tenant])
  @@index([isActive])
}

model IndexJob {
  id           String   @id @default(cuid())
  tenant       String   // shop domain (e.g., 'mystore.myshopify.com')
  status       String   // "pending", "running", "completed", "failed", "cancelled"
  startedAt    DateTime @default(now())
  finishedAt   DateTime?

  // Progress tracking
  totalProducts    Int     @default(0)
  processedProducts Int    @default(0)
  failedProducts   Int    @default(0)

  // Cost tracking
  tokensUsed   Int     @default(0)
  costEstimate Float   @default(0.0)
  actualCost   Float?

  // Job metadata
  operationId  String?  // Shopify bulk operation ID
  errorMessage String?

  // Configuration
  useAIEnrichment   Boolean @default(true)
  confidenceThreshold Float @default(0.7)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tenant])
  @@index([status])
  @@index([startedAt])
}

model ProductProfile {
  id               String   @id @default(cuid())
  tenant           String   // shop domain (e.g., 'mystore.myshopify.com')
  shopifyProductId String   // Shopify product ID
  title            String
  body             String?  // Product description
  vendor           String?
  productType      String?
  tags             String?  // JSON array of tags

  // Enriched mattress-specific attributes
  firmness         String?  // e.g., "soft", "medium", "firm"
  height           String?  // e.g., "12 inches"
  material         String?  // e.g., "memory foam", "hybrid"
  certifications   String?  // JSON array of certifications
  features         String?  // JSON array of features
  supportFeatures  String?  // JSON array of support features

  // Enriched metadata
  enrichedAt       DateTime @default(now())
  enrichmentMethod String   // "mapping", "heuristic", "llm"
  confidence       Float    // 0.0 to 1.0
  sourceEvidence   String?  // JSON array of evidence sources
  modelVersion     String?  // LLM model version if used

  // Content hash for change detection
  contentHash      String   @unique

  // Manual override flags
  lockedFirmness        Boolean @default(false)
  lockedHeight          Boolean @default(false)
  lockedMaterial        Boolean @default(false)
  lockedCertifications  Boolean @default(false)
  lockedFeatures        Boolean @default(false)
  lockedSupportFeatures Boolean @default(false)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([tenant])
  @@index([shopifyProductId])
  @@index([contentHash])
}

// Phase 4: Chat Sessions, Leads, Alerts, Analytics
model ChatSession {
  id            String    @id @default(cuid())
  tenantId      String
  conversationId String?  // Link to existing Conversation model
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  endReason     String?   // explicit_close | idle_timeout | completed | converted | post_conversion
  intentScore   Int?      // 0-100
  promptVersion String?
  variantId     String?   // Phase 5: A/B testing variant assignment
  summary       String?   // JSON string: LLM-generated summary
  consent       Boolean?  // Snapshot at end
  lastActivityAt DateTime @default(now())
  
  // Relations
  leads         Lead[]
  events        Event[]
  alerts        Alert[]

  @@index([tenantId])
  @@index([conversationId])
  @@index([endedAt])
  @@index([lastActivityAt])
  @@index([variantId])
}

model Lead {
  id                String      @id @default(cuid())
  tenantId          String
  sessionId         String
  session           ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  email             String?
  phone             String?
  name              String?
  zip               String?
  consent           Boolean     @default(false)
  shopifyCustomerId String?
  variantId         String?     // Phase 5: A/B testing attribution
  status            String      @default("new") // new|contacted|won|lost
  tags              String?     // JSON array of tags
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([tenantId])
  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
  @@index([variantId])
}

model Alert {
  id         String      @id @default(cuid())
  tenantId   String
  sessionId  String?
  session    ChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  type       String      // chat_end|lead_captured|high_intent|abandoned|post_conversion
  channel    String      // email|sms|slack|webhook
  payload    String      // JSON string
  status     String      @default("queued") // queued|sent|failed|skipped
  attempts   Int         @default(0)
  error      String?
  createdAt  DateTime    @default(now())
  sentAt     DateTime?

  @@index([tenantId])
  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
}

model Event {
  id         String      @id @default(cuid())
  tenantId   String
  sessionId  String?
  session    ChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  type       String      // widget_viewed|opened|first_message|data_point_captured|recommendation_shown|recommendation_clicked|add_to_cart|checkout_started|order_placed
  timestamp  DateTime    @default(now())
  metadata   String      // JSON string
  clickId    String?     // Attribution tracking
  variantId  String?     // Phase 5: A/B testing attribution

  @@index([tenantId])
  @@index([sessionId])
  @@index([type])
  @@index([timestamp])
  @@index([clickId])
  @@index([variantId])
}

model AlertSettings {
  id            String   @id @default(cuid())
  tenantId      String   @unique
  triggers      String   // JSON: { all:false, lead_captured:true, ... }
  channels      String   // JSON: { email:{to:""}, sms:{to:""}, slack:{url:""}, webhook:{url:""} }
  quietHours    String?  // JSON: { start:"22:00", end:"07:00", tz:"America/Chicago" }
  throttles     String   // JSON: { perHour:20, perSession:2 }
  digest        String?  // JSON: { enabled:true, time:"09:00", day:"Monday" }
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId])
}

// Phase 5: A/B Testing & Billing
model Experiment {
  id        String    @id @default(cuid())
  tenantId  String
  name      String
  status    String    // active|paused|completed
  startAt   DateTime  @default(now())
  endAt     DateTime?
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([tenantId])
  @@index([status])
  @@index([startAt])
}

model Variant {
  id                String     @id @default(cuid())
  experimentId      String
  experiment        Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  name              String
  splitPercent      Int        // 0..100
  promptVersionId   String?    // Optional pointer to existing prompt version
  rulesOverrideJson String?    // JSON string for runtime rule overrides
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([experimentId])
}

model Tenant {
  id          String   @id
  shop        String   @unique
  planName    String   @default("starter") // starter|pro|enterprise
  billingId   String?  // Shopify recurring charge ID
  trialEndsAt DateTime?
  quotas      String?  // JSON: { tokens: 100000, alertsPerHour: 20, ... }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([shop])
  @@index([planName])
}

model Plan {
  id        String   @id @default(cuid())
  name      String   @unique // starter|pro|enterprise
  price     Float    // Monthly price in USD
  features  String   // JSON: { tokens: 100000, alertsPerHour: 20, smsEnabled: false, ... }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}
